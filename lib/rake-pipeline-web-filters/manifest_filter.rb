module Rake::Pipeline::Web::Filters
  # Take all inputs and output an HTML5 cache manifest.
  #
  # @example
  #   !!!ruby
  #   Rake::Pipeline.build do
  #     input "app/assets", "**/*.js"
  #     output "public"
  #
  #     # NOTE: You must match and copy othwerise files will be deleted!
  #     match "**/*" do
  #       copy { |input| [input, "manifest/#{input}" ]
  #     end
  #
  #     match "manifest/**/*" do
  #       filter Rake::Pipeline::Web::Filters::UglifyFilter
  #     end
  #   end
  class ManifestFilter < Rake::Pipeline::Filter
    include Rake::Pipeline::Web::Filters::FilterWithDependencies

    # @param [String] Generated file name
    # @param [Proc] block a block to use as the Filter's
    #   {#output_name_generator}.
    def initialize(name = 'cache.manifest', &block)
      block ||= proc { |input| name }
      super(&block)
    end

    # Implement the {#generate_output} method required by
    # the {Filter} API. Generates a proper HTML5 cache manifest
    # with all inputs inside the cache section, a unique tag,
    # and states that all other requests require internet access.
    #
    # @param [Array<FileWrapper>] inputs an Array of
    #   {FileWrapper} objects representing the inputs to
    #   this filter.
    # @param [FileWrapper] output a single {FileWrapper}
    #   object representing the output.
    def generate_output(inputs, output)
      assets = inputs.map { |i| i.path.gsub('manifest/', '') }.join("\n")

      output.write ERB.new(template).result(binding)
    end

  private

    def external_dependencies
      [ "erb" ]
    end

    def template
      <<-erb
CACHE MANIFEST

# Automatically generated by rake-pipeline-web-filters
# Tag: <%= Time.now.to_i %> (<%= Time.now %>)

CACHE:
<%= assets %>

NETWORK:
# All other resources require network access
*
      erb
    end
  end
end
